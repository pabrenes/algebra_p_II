/**
 * Envía la matriz en formato de String a la consola
 */
public void print() {
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            System.out.print(matriz[i][j].toString());
            System.out.print('\t');
        }
        System.out.println();
    }
}

/**
 * Determina si una columna (variable) de una matriz de soluciones es independiente, una variable es independiente, si en toda
 * la fila donde se encuentra es la única con un valor
 *
 * @param fila     Vector unidimensional donde se validará la independencia de la columna
 * @param diagonal posición donde sólo debería existir el valor
 * @return Boleean, es independiente la columna ? true | false
 */
private boolean columnaIndependiente(Fraccion[] fila, int diagonal) {
    for (int i = diagonal + 1; i < columnas; i++) {
        if (!fila[i].equals(FRACCION_CERO)) {
            return false;
        }
    }
    return true;
}



/**
 * Dada la matriz actual, genera los vectores que formarán la base para las soluciones del sistema
 *
 * @return Fraccion[][], Vector de dos dimensiones con las bases para formar una solución al sistema
 */
public Fraccion[][] espacioDeSolucion() {
    Fraccion[][] matrizEscalonada = matrizEscalonada();                                                             //Se obtiene la versión escalonada de esta matriz.
    Fraccion[][] matrizNormalizada = new Fraccion[columnas][columnas];                                              //Se genera espacio para una nueva matriz cuadrada dada por la cantidad de variables
    Fraccion[][] espacioDeSolucion;                                                                                 //Los vectores que formarán parte de la base
    ArrayList<Integer> independientes = new ArrayList<>();                                                          //Se almacenan las variables independientes
    int diagonalActual = 0;                                                                                         //Auxiliar de desplazamiento
    int filaReal = 0;                                                                                               //Auxiliar de desplazamiento
    for (int i = 0; i < columnas; i++) {
        if (filaReal < filas && matrizEscalonada[filaReal][diagonalActual].equals(FRACCION_UNITARIA)) {             //Si la matriz actual posee un uno en la posición de la diagonal si se diera el caso de que fuese cuadrada
            matrizNormalizada[i] = matrizEscalonada[filaReal];                                                      //Mantengo esa misma columna para la matriz nueva cuadrada que se forma
            filaReal++;                                                                                             //Si usé la matriz actual, debo pasar a la siguiente de esta
            diagonalActual++;                                                                                       //avanzo a la siguiente diagonal
        } else {                                                                                                    //Si en la matriz actual hace falta un valor diagonal
            independientes.add(i);
            matrizNormalizada[i] = ghostRow(diagonalActual);                                                        //Se crea la nueva fila con el valor diagonal independiente
            diagonalActual++;                                                                                       //No me moví en la real, cree una nueva columna, pero sí en la nueva cuadrada
        }
    }
    //A este punto ya existe una matriz cuadrada con las variables de solución vamos a procesar las independientes
    for (int i = 0; i < columnas; i++) {                                                                            //Para cada nueva fila de la matriz normalizada
        if (columnaIndependiente(matrizNormalizada[i], i)) {                                                        //Si una variable es independiente
            independientes.add(i);                                                                                  //guarde el índice de columna de este
        }
    }
    espacioDeSolucion = new Fraccion[independientes.size()][columnas];                                              //Espacio en memoria para las soluciones
    diagonalActual = 0;                                                                                             //Re uso esta variable como index manual, ya que uso un for each en vez de un for con índice disponible
    for (int columnaIndependiente : independientes) {                                                               //Para cada linea de columna donde se determino que la variable era independiente
        for (int i = 0; i < columnas; i++) {                                                                        //Vamos a extraer el vector formado por esa columna
            if (columnaIndependiente != i) {                                                                        //Si la entrada que veo no es la diagonal (variable independiente) la mantengo, en caso contrario la hago negativa
                espacioDeSolucion[diagonalActual][i] = Fraccion.multiplicar(                                        //Se hace negativa ya que es el efecto de "despejar", estoy dando este valor como el necesario para formar otro
                        matrizNormalizada[i][columnaIndependiente], FRACCION_NEGATIVA);
            } else {
                espacioDeSolucion[diagonalActual][i] = matrizNormalizada[i][columnaIndependiente];                  //Si es la diagonal, copiela sin invertir el signo, esta siempre es la FRACCION_UNITARIA
            }
        }
        diagonalActual++;                                                                                           //Debo avanzar a la siguiente columna (indice del for each)
    }
    return espacioDeSolucion;                                                                                       //Retorne el espacio de solución encontrado
}